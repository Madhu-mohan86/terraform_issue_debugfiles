2024-03-24T20:29:57.080+0530 [INFO]  Terraform version: 1.7.5
2024-03-24T20:29:57.080+0530 [DEBUG] using github.com/hashicorp/go-tfe v1.41.0
2024-03-24T20:29:57.080+0530 [DEBUG] using github.com/hashicorp/hcl/v2 v2.19.1
2024-03-24T20:29:57.080+0530 [DEBUG] using github.com/hashicorp/terraform-svchost v0.1.1
2024-03-24T20:29:57.080+0530 [DEBUG] using github.com/zclconf/go-cty v1.14.1
2024-03-24T20:29:57.080+0530 [INFO]  Go runtime version: go1.22.1
2024-03-24T20:29:57.080+0530 [INFO]  CLI args: []string{"terraform", "plan"}
2024-03-24T20:29:57.080+0530 [TRACE] Stdout is not a terminal
2024-03-24T20:29:57.080+0530 [TRACE] Stderr is not a terminal
2024-03-24T20:29:57.080+0530 [TRACE] Stdin is a terminal
2024-03-24T20:29:57.080+0530 [DEBUG] Attempting to open CLI config file: /home/madhu/.terraformrc
2024-03-24T20:29:57.080+0530 [DEBUG] File doesn't exist, but doesn't need to. Ignoring.
2024-03-24T20:29:57.080+0530 [DEBUG] ignoring non-existing provider search directory terraform.d/plugins
2024-03-24T20:29:57.080+0530 [DEBUG] ignoring non-existing provider search directory /home/madhu/.terraform.d/plugins
2024-03-24T20:29:57.080+0530 [DEBUG] ignoring non-existing provider search directory /home/madhu/.local/share/terraform/plugins
2024-03-24T20:29:57.080+0530 [DEBUG] ignoring non-existing provider search directory /home/madhu/.local/share/flatpak/exports/share/terraform/plugins
2024-03-24T20:29:57.080+0530 [DEBUG] ignoring non-existing provider search directory /var/lib/flatpak/exports/share/terraform/plugins
2024-03-24T20:29:57.080+0530 [DEBUG] ignoring non-existing provider search directory /usr/local/share/terraform/plugins
2024-03-24T20:29:57.080+0530 [DEBUG] ignoring non-existing provider search directory /usr/share/terraform/plugins
2024-03-24T20:29:57.080+0530 [INFO]  CLI command args: []string{"plan"}
2024-03-24T20:29:57.081+0530 [TRACE] Meta.Backend: no config given or present on disk, so returning nil config
2024-03-24T20:29:57.081+0530 [TRACE] Meta.Backend: backend has not previously been initialized in this working directory
2024-03-24T20:29:57.081+0530 [DEBUG] New state was assigned lineage "77c835b6-574e-4cec-082a-9eb605f3c247"
2024-03-24T20:29:57.081+0530 [TRACE] Meta.Backend: using default local state only (no backend configuration, and no existing initialized backend)
2024-03-24T20:29:57.081+0530 [TRACE] Meta.Backend: instantiated backend of type <nil>
2024-03-24T20:29:57.082+0530 [TRACE] providercache.fillMetaCache: scanning directory .terraform/providers
2024-03-24T20:29:57.082+0530 [TRACE] getproviders.SearchLocalDirectory: found registry.opentofu.org/hashicorp/local v2.5.1 for linux_amd64 at .terraform/providers/registry.opentofu.org/hashicorp/local/2.5.1/linux_amd64
2024-03-24T20:29:57.082+0530 [TRACE] getproviders.SearchLocalDirectory: found registry.terraform.io/hashicorp/local v2.5.1 for linux_amd64 at .terraform/providers/registry.terraform.io/hashicorp/local/2.5.1/linux_amd64
2024-03-24T20:29:57.083+0530 [TRACE] providercache.fillMetaCache: including .terraform/providers/registry.terraform.io/hashicorp/local/2.5.1/linux_amd64 as a candidate package for registry.terraform.io/hashicorp/local 2.5.1
2024-03-24T20:29:57.083+0530 [TRACE] providercache.fillMetaCache: including .terraform/providers/registry.opentofu.org/hashicorp/local/2.5.1/linux_amd64 as a candidate package for registry.opentofu.org/hashicorp/local 2.5.1
2024-03-24T20:29:57.128+0530 [TRACE] providercache.fillMetaCache: using cached result from previous scan of .terraform/providers
2024-03-24T20:29:57.163+0530 [DEBUG] checking for provisioner in "."
2024-03-24T20:29:57.171+0530 [DEBUG] checking for provisioner in "/usr/bin"
2024-03-24T20:29:57.171+0530 [TRACE] Meta.Backend: backend <nil> does not support operations, so wrapping it in a local backend
2024-03-24T20:29:57.172+0530 [INFO]  backend/local: starting Plan operation
2024-03-24T20:29:57.172+0530 [TRACE] backend/local: requesting state manager for workspace "default"
2024-03-24T20:29:57.172+0530 [TRACE] backend/local: state manager for workspace "default" will:
 - read initial snapshot from terraform.tfstate
 - write new snapshots to terraform.tfstate
 - create any backup at terraform.tfstate.backup
2024-03-24T20:29:57.172+0530 [TRACE] backend/local: requesting state lock for workspace "default"
2024-03-24T20:29:57.172+0530 [TRACE] statemgr.Filesystem: preparing to manage state snapshots at terraform.tfstate
2024-03-24T20:29:57.173+0530 [TRACE] statemgr.Filesystem: existing snapshot has lineage "04d1b4bb-1f74-dee1-7cf1-d3b9c49b39bf" serial 7
2024-03-24T20:29:57.173+0530 [TRACE] statemgr.Filesystem: locking terraform.tfstate using fcntl flock
[31mâ•·[0m[0m
[31mâ”‚[0m [0m[1m[31mError: [0m[0m[1mError acquiring the state lock[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0m[0mError message: resource temporarily unavailable
[31mâ”‚[0m [0mLock Info:
[31mâ”‚[0m [0m  ID:        fb68ac68-7c27-06fa-4dcc-df7f4134a6ed
[31mâ”‚[0m [0m  Path:      terraform.tfstate
[31mâ”‚[0m [0m  Operation: OperationTypePlan
[31mâ”‚[0m [0m  Who:       madhu@archlinux
[31mâ”‚[0m [0m  Version:   1.7.5
[31mâ”‚[0m [0m  Created:   2024-03-24 14:45:47.431218847 +0000 UTC
[31mâ”‚[0m [0m  Info:      
[31mâ”‚[0m [0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0mTerraform acquires a state lock to protect the state from being written
[31mâ”‚[0m [0mby multiple users at the same time. Please resolve the issue above and try
[31mâ”‚[0m [0magain. For most commands, you can disable locking with the "-lock=false"
[31mâ”‚[0m [0mflag, but this is not recommended.
[31mâ•µ[0m[0m
